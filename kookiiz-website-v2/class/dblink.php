<?php
	/**********************************************************
    Title: DB Link
    Authors: Kookiiz Team
    Purpose: Provide a PDO interface for database connections
    ***********************************************************/

    //Dependencies
    require_once $_SERVER['DOCUMENT_ROOT'] . '/secure/mysql.php';

    //Represents a database connection
    class DBLink
    {
        /**********************************************************
        PROPERTIES
        ***********************************************************/

        //Log every single query (for debugging)
        const LOG_ALL   = false;

        //Constants
        const LOG       = '/logs/mysql.log';
        const SERVER    = 'localhost';

        //Private properties
        private $db;            //PDO object
        private $db_name;       //database name
        private $db_user;       //database user
        private $db_pass;       //user password
        private $error          = null;     //store exception object
        private $last_query     = '';       //store last query
        private $last_params    = array();  //store last query params
        private $last_state     = '';       //store last query state

        /**********************************************************
        CONSTRUCTOR
        ***********************************************************/

        /**
         * Class constructor
         * @param String $db_name database name
         * @param String $db_user database user
         * @param String $db_pass user password
         */
        public function __construct($db_name, $db_user = MYSQL_USER, $db_pass = MYSQL_PASS)
        {
            $this->db_name = $db_name;
            $this->db_user = $db_user;
            $this->db_pass = $db_pass;
            $this->connect();
        }

        /**********************************************************
        DESTRUCTOR
        ***********************************************************/

        /**
         * Class destructor
         */
        public function __destruct()
        {
            $this->db = null;
        }

        /**********************************************************
        CONNECT
        ***********************************************************/

        /**
         * Open database connection and set appropriate error mode and charset
         */
        private function connect()
        {
            try
            {
                $this->db = new PDO("mysql:host=" . self::SERVER . ";dbname=$this->db_name", $this->db_user, $this->db_pass);
                $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                $this->db->exec("set names 'utf8'");
            }
            catch(PDOException $e)
            {
                $this->error = $e;
                $this->log();
            }
        }

        /**********************************************************
        LOG
        ***********************************************************/

        /**
         * Log current DBLink state
         */
        private function log()
        {
            //Open or create log file
            $log = fopen($_SERVER['DOCUMENT_ROOT'] . self::LOG, 'ab');

            //Format params
            $params = '';
            foreach($this->last_params as $key => $value)
            {
                $params .= " $key=$value |";
            }

            //Write log
            fwrite($log, date('d.m.y H:i') . "\r\n");
            fwrite($log, 'State: ' . $this->last_state . "\r\n");
            fwrite($log, 'Query: ' . $this->last_query . "\r\n");
            fwrite($log, 'Params: ' . $params . "\r\n");
            if($this->error)    
                fwrite($log, 'Error: #' . $this->error->getCode() . ' - ' . $this->error->getMessage() . "\r\n");
            else                
                fwrite($log, 'Error: none' . "\r\n");
            fwrite($log, "\r\n");

            //Close log file
            fclose($log);
        }

        /**********************************************************
        INSERT ID
        ***********************************************************/

        /**
         * Return unique ID of last autoincrement value generated by an insert
         * @return Int unique insert ID
         */
        public function insertID()
        {
            return (int)$this->db->lastInsertId();
        }

        /**********************************************************
        PREPARED STATEMENTS
        ***********************************************************/

        /**
         * Bind several values to a statement
         * @param PDOStatement $stmt prepared statement object
         * @param Array $params list of name/value or index/value pairs
         * @return PDOStatement statement object
         */
        public function bind(PDOStatement &$stmt, array $params)
        {
            $this->error        = null;
            $this->last_state   = 'bind';
            $this->last_query   = $stmt->queryString;
            $this->last_params  = $params;

            try
            {
                foreach($params as $key => $value)
                {
                    $type = is_int($value) ? PDO::PARAM_INT : PDO::PARAM_STR;
                    if(is_int($key))    
                        $stmt->bindValue($key + 1, $value, $type);
                    else               
                        $stmt->bindValue($key, $value, $type);
                }
            }
            catch(PDOException $e)
            {
                $this->error = $e;
                $this->log();
            }
            return $stmt;
        }

        /**
         * Execute a prepared statement
         * @param PDOStatement $stmt prepared statement object
         * @param array $params list of name/value or index/value pairs (optional)
         * @return PDOStatement prepared statement object
         */
        public function execute(PDOStatement &$stmt, array $params = null)
        {
            $this->error        = null;
            $this->last_state   = 'execute';
            $this->last_query   = $stmt->queryString;
            if(!is_null($params)) $this->last_params = $params;

            try
            {
                //Execute statement with provided parameters (if any)
                if(is_null($params))    
                    $stmt->execute();
                else                    
                    $stmt->execute($params);

                //Log query if dedicated constant is enabled
                if(self::LOG_ALL) 
                    $this->log();

                //Return statement object
                return $stmt;
            }
            catch(PDOException $e)
            {
                $this->error = $e;
                $this->log();
            }
        }

        /**
         * Init a prepared statement object
         * @param String $query prepared statement query
         * @return PDOStatement prepared statement object
         */
        public function prepare($query)
        {
            $this->error        = null;
            $this->last_state   = 'prepare';
            $this->last_query   = $query;

            try
            {
                return $this->db->prepare($query);
            }
            catch(PDOException $e)
            {
                $this->error = $e;
                $this->log();
            }
        }

        /**********************************************************
        QUERY
        ***********************************************************/

        /**
         * Wrap all the steps of the query process with prepared statements
         * @param String $query a query string to prepare and execute
         * @param Array $params_list list of params as name/value or index/value pairs (optional)
         * @return PDOStatement prepared statement object
         */
        public function query($query, array $params_list = null)
        {
            //Store last query and reset params
            $this->error        = null;
            $this->last_state   = 'query';
            $this->last_query   = $query;
            $this->last_params  = array();

            //Prepare query
            $stmt = $this->prepare($query);
            if(is_null($params_list)) $params_list = array();

            //Check if params list is an array of arrays (a list of params sets)
            if(isset($params_list[0]) && is_array($params_list[0]))
            {
                foreach($params_list as $params)
                {
                    $this->bind($stmt, $params);
                    $this->execute($stmt);
                }
            }
            else
            {
                $this->bind($stmt, $params_list);
                $this->execute($stmt);
            }           
            return $stmt;
        }
    }
?>